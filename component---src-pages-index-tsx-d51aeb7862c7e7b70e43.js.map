{"version":3,"sources":["webpack:///./src/components/lists/styles.tsx","webpack:///./src/components/lists/index.tsx","webpack:///./src/pages/index.tsx"],"names":["Container","styled","div","Title","h1","Tag","code","theme","color","tagColor","primary","Lists","title","slug","date","tags","className","to","map","tag","key","React","memo","h3","Description","p","ListWrapper","section","border","Index","data","MainInfos","info","idx","description","descriptions","slice","allMarkdownRemark","edges","edge","node","frontmatter","id","fields","query"],"mappings":"8FAAA,sHAEaA,EAAYC,IAAOC,IAAV,uEAAGD,CAAH,waAyCTE,EAAQF,IAAOG,GAAV,mEAAGH,CAAH,mDAKLI,EAAMJ,IAAOK,KAAV,iEAAGL,CAAH,sKAOQ,qBAAGM,MAAkBC,MAAMC,YAEtC,qBAAGF,MAAkBC,MAAME,Y,oCCzDxC,iDAYMC,EAA+B,SAAC,GAAgC,IAA9BC,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KACvD,OACI,kBAAC,IAAD,KACI,yBAAKC,UAAU,gBAEX,kBAAC,OAAD,CAAMA,UAAU,aAAaC,GAAIJ,GAC7B,wBAAIG,UAAU,mBAAd,GAAoCJ,IAGxC,wBAAII,UAAU,kBAAd,KAAkCF,GAClC,6BACKC,aADL,EACKA,EAAMG,KAAI,SAAAC,GAAG,OACV,kBAAC,IAAD,CAAKC,IAAKD,GAAMA,UAQzBE,QAAMC,KAAKX,I,kCC/B1B,sHAOMR,EAAQF,IAAOsB,GAAV,+DAAGtB,CAAH,qGASLuB,EAAcvB,IAAOwB,EAAV,qEAAGxB,CAAH,4DAMXyB,EAAczB,IAAO0B,QAAV,qEAAG1B,CAAH,+CAEW,qBAAGM,MAAkBC,MAAMoB,UAoCxCC,UAjCmB,SAAC,GAAa,MAAXC,EAAW,EAAXA,KACjC,OACI,kBAAC,IAAD,KACI,iCACKC,IAAUb,KAAI,SAACc,EAAMC,GAAP,OACX,kBAAC,WAAD,CAAUb,IAAKY,EAAKpB,MAAQqB,GACxB,kBAAC9B,EAAD,CAAOa,UAAU,mBAAmBgB,aAApC,EAAoCA,EAAMpB,QACzCoB,aAAA,EAAAA,EAAME,cAAe,kBAACV,EAAD,CAAaR,UAAU,QAAvB,KAAiCgB,aAAjC,EAAiCA,EAAME,cAC5DF,aAAA,EAAAA,EAAMG,eACHH,EAAKG,aAAajB,KAAI,SAAAgB,GAAW,OAC7B,kBAACV,EAAD,CAAaJ,IAAKc,EAAYE,MAAM,EAAG,IAAKpB,UAAU,QAAtD,KACOkB,WAM3B,kBAACR,EAAD,KACI,kBAACvB,EAAD,CAAOa,UAAU,mBAAjB,SACCc,SAFL,UAEKA,EAAMO,yBAFX,aAEK,EAAyBC,MAAMpB,KAAI,SAACqB,EAAMN,GAAP,eAChC,kBAAC,IAAD,CACIlB,KAAMwB,SAAF,UAAEA,EAAMC,YAAR,iBAAE,EAAYC,mBAAd,aAAE,EAAyB1B,KAC/BH,MAAO2B,EAAKC,KAAKC,YAAY7B,MAC7BQ,IAAKmB,EAAKC,KAAKE,GAAGN,MAAM,EAAG,IAAMH,EACjCnB,KAAMyB,EAAKC,KAAKC,YAAY3B,KAC5BD,KAAM0B,EAAKC,KAAKG,OAAO9B,aAUxC,IAAM+B,EAAQ","file":"component---src-pages-index-tsx-d51aeb7862c7e7b70e43.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n    padding: 10px;\r\n    margin-left: 10px;\r\n\r\n    .list-wrapper {\r\n        display: flex;\r\n        flex-direction: column;\r\n    }\r\n\r\n    .link-posts {\r\n        width: fit-content;\r\n        text-decoration: none;\r\n        color: inherit;\r\n    }\r\n\r\n    .post-title {\r\n        display: initial;\r\n        margin-bottom: 11px;\r\n        &:hover {\r\n            opacity: 0.65;\r\n            transition: opacity 0.25s;\r\n        }\r\n        transition: opacity 0.25s;\r\n\r\n        .index {\r\n            font-size: 1.2em;\r\n            margin-right: 3px;\r\n        }\r\n    }\r\n\r\n    .post-date {\r\n        display: initial;\r\n        color: #555;\r\n        font-size: 0.75em;\r\n        margin: 0;\r\n        padding: 0;\r\n        margin-left: 15px;\r\n        margin-bottom: 10px;\r\n    }\r\n`;\r\n\r\nexport const Title = styled.h1`\r\n    display: inline-block;\r\n    border-bottom: 1px solid;\r\n`;\r\n\r\nexport const Tag = styled.code`\r\n    font-size: 0.85em;\r\n    /* width: 100%; */\r\n    font-family: 'Roboto';\r\n    border-radius: 4px;\r\n    padding: 4px 6px 4px 6px;\r\n    overflow: hidden;\r\n    background-color: ${({ theme }) => theme.color.tagColor};\r\n    margin-right: 2px;\r\n    color: ${({ theme }) => theme.color.primary};\r\n    margin-left: 3px;\r\n`;\r\n","import { Link } from 'gatsby';\r\nimport React from 'react';\r\nimport { Container, Tag } from './styles';\r\n// import { OutboundLink } from 'gatsby-plugin-gtag';\r\n\r\ntype ListsProps = {\r\n    title: string;\r\n    date: string;\r\n    slug: string;\r\n    tags?: string[];\r\n};\r\n\r\nconst Lists: React.VFC<ListsProps> = ({ title, slug, date, tags }) => {\r\n    return (\r\n        <Container>\r\n            <div className=\"list-wrapper\">\r\n                {/* <OutboundLink className=\"link-posts\" href={'https://jaewoong2.github.io/woongs-world/' + slug}> */}\r\n                <Link className=\"link-posts\" to={slug}>\r\n                    <h3 className=\"post-title text\">{`${title}`}</h3>\r\n                </Link>\r\n                {/* </OutboundLink> */}\r\n                <h4 className=\"post-date text\">: {date}</h4>\r\n                <div>\r\n                    {tags?.map(tag => (\r\n                        <Tag key={tag}>{tag}</Tag>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default React.memo(Lists);\r\n","import { graphql } from 'gatsby';\r\nimport React, { Fragment } from 'react';\r\nimport styled from 'styled-components';\r\nimport Lists from '../components/lists';\r\nimport { MainInfos } from '../repo/app';\r\nimport MainComponent from '../templates/Layout';\r\nimport { ImdProps } from '../utils/type';\r\n\r\nconst Title = styled.h3`\r\n    font-size: 1.5em;\r\n    padding: 0;\r\n    margin-bottom: 5px;\r\n    font-weight: normal;\r\n    margin-left: 10px;\r\n    margin-top: 8px;\r\n`;\r\n\r\nconst Description = styled.p`\r\n    font-size: 0.925em;\r\n    margin-left: 11px;\r\n    margin-bottom: 15px;\r\n`;\r\n\r\nconst ListWrapper = styled.section`\r\n    margin-top: 10px;\r\n    border-top: 2px solid ${({ theme }) => theme.color.border};\r\n`;\r\n\r\nconst Index: React.FC<ImdProps> = ({ data }) => {\r\n    return (\r\n        <MainComponent>\r\n            <section>\r\n                {MainInfos.map((info, idx) => (\r\n                    <Fragment key={info.title + idx}>\r\n                        <Title className=\"represent-color\">{info?.title}</Title>\r\n                        {info?.description && <Description className=\"text\">- {info?.description}</Description>}\r\n                        {info?.descriptions &&\r\n                            info.descriptions.map(description => (\r\n                                <Description key={description.slice(0, 25)} className=\"text\">\r\n                                    - {description}\r\n                                </Description>\r\n                            ))}\r\n                    </Fragment>\r\n                ))}\r\n            </section>\r\n            <ListWrapper>\r\n                <Title className=\"represent-color\">Posts</Title>\r\n                {data?.allMarkdownRemark?.edges.map((edge, idx) => (\r\n                    <Lists\r\n                        tags={edge?.node?.frontmatter?.tags}\r\n                        title={edge.node.frontmatter.title}\r\n                        key={edge.node.id.slice(0, 10) + idx}\r\n                        date={edge.node.frontmatter.date}\r\n                        slug={edge.node.fields.slug}\r\n                    />\r\n                ))}\r\n            </ListWrapper>\r\n        </MainComponent>\r\n    );\r\n};\r\n\r\nexport default Index;\r\n\r\nexport const query = graphql`\r\n    query {\r\n        allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }, limit: 5) {\r\n            edges {\r\n                node {\r\n                    id\r\n                    frontmatter {\r\n                        title\r\n                        date(formatString: \"DD MMMM, YYYY\")\r\n                        tags\r\n                    }\r\n                    fields {\r\n                        slug\r\n                    }\r\n                    excerpt\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n"],"sourceRoot":""}