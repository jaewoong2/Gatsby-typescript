{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/dev/GatsbyDarkTheme/","result":{"data":{"markdownRemark":{"fields":{"slug":"/dev/GatsbyDarkTheme/"},"html":"<p>Gatsby JS를 간단히 말하자면 정적페이지이다.</p>\n<p>그래서 동적으로 Javascript 코드로 CSS를 바꾸는 방법은 정적페이지인 Gatsby JS에는 CRA로 만드는 웹페이지와 다르게 해줘야한다.</p>\n<blockquote>\n<p>작성중</p>\n</blockquote>\n<h3>Styled Theme Provider</h3>\n<p>Styled Component에서 제공하는 Theme(직접 커스텀) 을 Styled를 사용하는 모든 컴포넌트 Element가 쓸 수 있도록 해주는 Provider이다.</p>\n<ul>\n<li>\n<h4>1. styled.d.ts 파일 작성</h4>\n<p>타입스크립트에서 직접 커스텀한 Theme의 Type들을 사용하기 위한 <code class=\"language-text\">.d.ts 파일</code></p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token string\">'styled-components'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> colorTypes <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./types'</span>\n<span class=\"token comment\">// colorTypes 는 본인이 커스텀</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">'styled-components'</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">DefaultTheme</span> <span class=\"token punctuation\">{</span>\n        isDarkMode<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n        color<span class=\"token operator\">:</span> colorTypes<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Gatsby-ssr.js</h3>\n<p>Gatsby의 Element[src 에 있는 jsx] 들이 Theme를 갖고 <code class=\"language-text\">Dark</code>, <code class=\"language-text\">light</code> 에 따라 css가 바뀌려면, server side rendering 을 해줘야한다. </p>\n<p>즉, 전역상태 Provider, Styled Theme Provider 각각을 element들보다 상위컴포넌트로 싸주고, Server가 실행 되기전에 전역상태가 활성화(?) 되고, 설정한 Styled Theme이 Element에 도달하려면, <code class=\"language-text\">Gatsby-ssr.js</code> 를 작성해줘야한다.</p>\n<p><code class=\"language-text\">Gatsby-ssr.js</code> 는, <code class=\"language-text\">root/gatsby-ssr.js</code> 폴더로 작성 해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ContextAPIProvider <span class=\"token keyword\">from</span> <span class=\"token string\">'./src/provider/ContextAPIProvider'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> StyledThemeProvider <span class=\"token keyword\">from</span> <span class=\"token string\">'./src/style/StyledThemeProvider'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> GlobalStyle <span class=\"token keyword\">from</span> <span class=\"token string\">'./src/style/global-theme'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">wrapRootElement</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> element <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ContextAPIProvider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">StyledThemeProvider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">GlobalStyle</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n            </span><span class=\"token punctuation\">{</span>element<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">StyledThemeProvider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ContextAPIProvider</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","frontmatter":{"title":"[Gatsby JS - Typescript] StyledComponent 로 Dark Theme 구현","tags":["gatsbyjs","styled-componenet","typescript"]}}},"pageContext":{"slug":"/dev/GatsbyDarkTheme/","next":"/dev/redux-toolkit/","nextTitle":"Redux-Toolkit (with_React, Typescript)","previous":"/dev/CustomHooks만들기/","previousTitle":"Custom Hooks 만들기"}},"staticQueryHashes":["3501822393"]}