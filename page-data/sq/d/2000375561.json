{"data":{"markdownRemark":{"html":"<pre><code class=\"language-ts\">import { useState, useCallback, Dispatch, SetStateAction } from 'react';\n\nfunction useInput&#x3C;T>(initalValue: T)\n    : [T, Dispatch&#x3C;SetStateAction&#x3C;T>>, (e?: React.ChangeEvent&#x3C;HTMLInputElement>) => void] {\n    const [value, setValue] = useState&#x3C;typeof initalValue>(initalValue);\n    const changer = useCallback(e => {\n        setValue(e.target.value);\n    }, []);\n\n    return [value, setValue, changer];\n}\n\nexport default useInput;\n</code></pre>\n<h3>Form</h3>\n<p>로그인이나 회원가입 기능을 구현할 때, <code>input tag</code> 를 많이 사용하게 될 것이다. <code>input tag</code>의 상태값을 받기위해서 <code>value</code> 값과 <code>onChange</code> 함수를 구현해주어야 하는데, <code>input</code> 이 많아 지면 <code>Component</code> 에서 작성해야 하는 함수가 많아진다. 이를 위해 만든 커스텀 훅이다.</p>\n<pre><code class=\"language-ts\">import useInput from '../hooks/useInput.tsx'\n\n...\nconst [value, setValue, onChangeValue] = useInput&#x3C;string>('');\n...\n\nreturn (\n    &#x3C;input value={value} onChange={onChangeValue} />\n)\n</code></pre>\n<h3>Generic</h3>\n<p>커스텀 훅의 타입 파라미터는 Generic으로 설정 해준다. <code>Form</code> 태그의 값들은 보통 <code>string</code> 이지만, <code>number</code>가 올 수 있고, 또한 특정한 값만 받아오게 하기 위해서 값을 강제 시킬 수 있기 때문에, Generic Type으로 해줘야 편하게 커스텀 훅을 사용 할 수 있기 때문이다.</p>","frontmatter":{"title":"Custom Hooks 만들기"}}}}