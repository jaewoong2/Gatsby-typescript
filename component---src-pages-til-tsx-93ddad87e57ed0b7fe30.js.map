{"version":3,"sources":["webpack:///./src/components/lists/styles.tsx","webpack:///./src/components/lists/index.tsx","webpack:///./src/components/SearchBar/styles.tsx","webpack:///./src/components/SearchBar/index.tsx","webpack:///./src/pages/til.tsx","webpack:///./src/hooks/useInput.ts"],"names":["Container","styled","div","Tag","h1","code","theme","color","tagColor","primary","Lists","title","slug","date","tags","className","to","map","tag","key","React","memo","Form","form","Input","input","dark","representativeColor","isDarkMode","purple","yellow","SearchBar","tagName","onChangeTagName","useEffect","console","log","value","onChange","query","Til","initValue","setValue","onChangeValue","data","useState","useCallback","e","target","allMarkdownRemark","edges","edge","idx","node","frontmatter","find","toLocaleLowerCase","id","slice","fields"],"mappings":"8FAAA,oFAEaA,EAAYC,IAAOC,IAAV,uEAAGD,CAAH,waA8CTE,GALQF,IAAOG,GAAV,mEAAGH,CAAH,mDAKCA,IAAOI,KAAV,iEAAGJ,CAAH,sKAMQ,qBAAGK,MAAkBC,MAAMC,YAEtC,qBAAGF,MAAkBC,MAAME,a,oCCxDxC,iDAYMC,EAA+B,SAAC,GAAgC,IAA9BC,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KACvD,OACI,kBAAC,IAAD,KACI,yBAAKC,UAAU,gBAEX,kBAAC,OAAD,CAAMA,UAAU,aAAaC,GAAIJ,GAC7B,wBAAIG,UAAU,mBAAd,GAAoCJ,IAGxC,wBAAII,UAAU,kBAAd,KAAkCF,GAClC,yBAAKE,UAAU,eACVD,aADL,EACKA,EAAMG,KAAI,SAAAC,GAAG,OACV,kBAAC,IAAD,CAAKC,IAAKD,GAAMA,UAQzBE,QAAMC,KAAKX,I,gIC9BbY,EAAOrB,IAAOsB,KAAV,mEAAGtB,CAAH,sGASJuB,EAAQvB,IAAOwB,MAAV,oEAAGxB,CAAH,iTAML,qBAAGK,MAAkBC,MAAMmB,QAGT,qBAAGpB,MAAkBC,MAAMoB,uBAKvB,gBAAGrB,EAAH,EAAGA,MAAH,OAAgBA,EAAMsB,WAAatB,EAAMC,MAAMsB,OAASvB,EAAMC,MAAMuB,UCNxFC,EAX0B,SAAC,GAAiC,IAA/BC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAIjD,OAHAC,qBAAU,WACNC,QAAQC,IAAIJ,KACb,CAACA,IAEA,kBAACV,EAAD,KACI,kBAACE,EAAD,CAAOa,MAAOL,EAASM,SAAUL,M,YCkChCM,GAFEC,UAtCkB,SAAC,GAAa,ICN3CC,EACkG,EAC3FJ,EAAOK,EACRC,EDG0BC,EAAW,EAAXA,KAAW,GCN3CH,EDO8C,GCNoD,EACxEI,mBAASJ,GAA5BJ,EAD2F,KACpFK,EADoF,KAE5FC,EAAgBG,uBAAY,SAAAC,GAC9BL,EAASK,EAAEC,OAAOX,SACnB,IAEI,CAACA,EAAOK,EAAUC,IDAlBX,EADoC,KACzBC,EADyB,KAG3C,OACI,kBAAC,IAAD,KACI,iCACI,kBAAC,EAAD,CAAWD,QAASA,EAASC,gBAAiBA,IAC7CW,EAAKK,kBAAkBC,MAAMjC,KAAI,SAACkC,EAAMC,GAAQ,QAChC,UAAb,OAAIpB,GACOmB,SAAA,UAAAA,EAAME,YAAN,mBAAYC,mBAAZ,mBAAyBxC,YAAzB,eAA+ByC,MAClC,SAAAzC,GAAI,OAAIA,EAAK0C,sBAAwBxB,EAAQwB,wBAE7C,kBAAC,IAAD,CACI1C,KAAMqC,SAAF,UAAEA,EAAME,YAAR,iBAAE,EAAYC,mBAAd,aAAE,EAAyBxC,KAC/BH,MAAOwC,EAAKE,KAAKC,YAAY3C,MAC7BQ,IAAKgC,EAAKE,KAAKI,GAAGC,MAAM,EAAG,IAAMN,EACjCvC,KAAMsC,EAAKE,KAAKC,YAAYzC,KAC5BD,KAAMuC,EAAKE,KAAKM,OAAO/C,OAG3B,qCAIJ,kBAAC,IAAD,CACIE,KAAMqC,SAAF,UAAEA,EAAME,YAAR,iBAAE,EAAYC,mBAAd,aAAE,EAAyBxC,KAC/BH,MAAOwC,EAAKE,KAAKC,YAAY3C,MAC7BQ,IAAKgC,EAAKE,KAAKI,GAAGC,MAAM,EAAG,IAAMN,EACjCvC,KAAMsC,EAAKE,KAAKC,YAAYzC,KAC5BD,KAAMuC,EAAKE,KAAKM,OAAO/C,aAW9B","file":"component---src-pages-til-tsx-93ddad87e57ed0b7fe30.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n    padding: 10px;\r\n    margin-left: 10px;\r\n\r\n    .list-wrapper {\r\n        display: flex;\r\n        flex-direction: column;\r\n    }\r\n\r\n    .link-posts {\r\n        width: fit-content;\r\n        text-decoration: none;\r\n        color: inherit;\r\n    }\r\n\r\n    .post-title {\r\n        display: initial;\r\n        margin-bottom: 11px;\r\n        &:hover {\r\n            opacity: 0.65;\r\n            transition: opacity 0.25s;\r\n        }\r\n        transition: opacity 0.25s;\r\n\r\n        .index {\r\n            font-size: 1.2em;\r\n            margin-right: 3px;\r\n        }\r\n    }\r\n\r\n    .post-date {\r\n        display: initial;\r\n        color: #555;\r\n        font-size: 0.75em;\r\n        margin: 0;\r\n        padding: 0;\r\n        margin-left: 15px;\r\n        margin-bottom: 10px;\r\n    }\r\n`;\r\n\r\nexport const Title = styled.h1`\r\n    display: inline-block;\r\n    border-bottom: 1px solid;\r\n`;\r\n\r\nexport const Tag = styled.code`\r\n    font-size: 0.85em;\r\n    font-family: 'Roboto';\r\n    border-radius: 4px;\r\n    padding: 4px 6px 4px 6px;\r\n    overflow: hidden;\r\n    background-color: ${({ theme }) => theme.color.tagColor};\r\n    margin-right: 2px;\r\n    color: ${({ theme }) => theme.color.primary};\r\n    margin-left: 3px;\r\n`;\r\n","import { Link } from 'gatsby';\r\nimport React from 'react';\r\nimport { Container, Tag } from './styles';\r\n// import { OutboundLink } from 'gatsby-plugin-gtag';\r\n\r\ntype ListsProps = {\r\n    title: string;\r\n    date: string;\r\n    slug: string;\r\n    tags?: string[];\r\n};\r\n\r\nconst Lists: React.VFC<ListsProps> = ({ title, slug, date, tags }) => {\r\n    return (\r\n        <Container>\r\n            <div className=\"list-wrapper\">\r\n                {/* <OutboundLink className=\"link-posts\" href={'https://jaewoong2.github.io/woongs-world/' + slug}> */}\r\n                <Link className=\"link-posts\" to={slug}>\r\n                    <h3 className=\"post-title text\">{`${title}`}</h3>\r\n                </Link>\r\n                {/* </OutboundLink> */}\r\n                <h4 className=\"post-date text\">: {date}</h4>\r\n                <div className=\"tag-wrapper\">\r\n                    {tags?.map(tag => (\r\n                        <Tag key={tag}>{tag}</Tag>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default React.memo(Lists);\r\n","import styled from 'styled-components';\r\n\r\nexport const Form = styled.form`\r\n    position: absolute;\r\n    display: flex;\r\n    right: 0;\r\n    justify-content: flex-end;\r\n    padding: 15px;\r\n    padding-bottom: 0px;\r\n`;\r\n\r\nexport const Input = styled.input`\r\n    padding: 0px 0px 3px 7px;\r\n    margin: 0;\r\n    background-color: inherit;\r\n    font-size: 0.75em;\r\n    border-radius: 0px 10px 0 0;\r\n    color: ${({ theme }) => theme.color.dark};\r\n    outline: none;\r\n    border: none;\r\n    border-bottom: 2px solid ${({ theme }) => theme.color.representativeColor} !important;\r\n    transition: border-color 0.5s;\r\n    &:active,\r\n    &:focus,\r\n    &:hover {\r\n        border-bottom: 2px solid ${({ theme }) => (theme.isDarkMode ? theme.color.purple : theme.color.yellow)} !important;\r\n        transition: border-color 0.5s;\r\n    }\r\n`;\r\n","import React, { useEffect } from 'react';\r\nimport { Form, Input } from './styles';\r\n\r\ninterface ISearchBar {\r\n    tagName: string;\r\n    onChangeTagName: (e?: React.ChangeEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nconst SearchBar: React.VFC<ISearchBar> = ({ tagName, onChangeTagName }) => {\r\n    useEffect(() => {\r\n        console.log(tagName);\r\n    }, [tagName]);\r\n    return (\r\n        <Form>\r\n            <Input value={tagName} onChange={onChangeTagName} />\r\n        </Form>\r\n    );\r\n};\r\n\r\nexport default SearchBar;\r\n","import { graphql } from 'gatsby';\r\nimport React from 'react';\r\nimport Lists from '../components/lists';\r\nimport SearchBar from '../components/SearchBar';\r\nimport useInput from '../hooks/useInput';\r\nimport MainComponent from '../templates/Layout';\r\nimport { ImdProps } from '../utils/type';\r\n\r\nconst Til: React.VFC<ImdProps> = ({ data }) => {\r\n    const [tagName, , onChangeTagName] = useInput('');\r\n\r\n    return (\r\n        <MainComponent>\r\n            <section>\r\n                <SearchBar tagName={tagName} onChangeTagName={onChangeTagName} />\r\n                {data.allMarkdownRemark.edges.map((edge, idx) => {\r\n                    if (tagName) {\r\n                        return edge?.node?.frontmatter?.tags?.find(\r\n                            tags => tags.toLocaleLowerCase() === tagName.toLocaleLowerCase(),\r\n                        ) ? (\r\n                            <Lists\r\n                                tags={edge?.node?.frontmatter?.tags}\r\n                                title={edge.node.frontmatter.title}\r\n                                key={edge.node.id.slice(0, 10) + idx}\r\n                                date={edge.node.frontmatter.date}\r\n                                slug={edge.node.fields.slug}\r\n                            />\r\n                        ) : (\r\n                            <></>\r\n                        );\r\n                    }\r\n                    return (\r\n                        <Lists\r\n                            tags={edge?.node?.frontmatter?.tags}\r\n                            title={edge.node.frontmatter.title}\r\n                            key={edge.node.id.slice(0, 10) + idx}\r\n                            date={edge.node.frontmatter.date}\r\n                            slug={edge.node.fields.slug}\r\n                        />\r\n                    );\r\n                })}\r\n            </section>\r\n        </MainComponent>\r\n    );\r\n};\r\n\r\nexport default Til;\r\n\r\nexport const query = graphql`\r\n    query {\r\n        allMarkdownRemark(\r\n            filter: { frontmatter: { folder: { eq: \"til\" } } }\r\n            sort: { fields: [frontmatter___date], order: DESC }\r\n        ) {\r\n            totalCount\r\n            edges {\r\n                node {\r\n                    id\r\n                    frontmatter {\r\n                        title\r\n                        date(formatString: \"DD MMMM, YYYY\")\r\n                        tags\r\n                    }\r\n                    fields {\r\n                        slug\r\n                    }\r\n                    excerpt\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n","import React, { useCallback, useState } from 'react';\r\nexport default <T>(\r\n    initValue: T,\r\n): [T, React.Dispatch<React.SetStateAction<T>>, (e?: React.ChangeEvent<HTMLInputElement>) => void] => {\r\n    const [value, setValue] = useState(initValue);\r\n    const onChangeValue = useCallback(e => {\r\n        setValue(e.target.value);\r\n    }, []);\r\n\r\n    return [value, setValue, onChangeValue];\r\n};\r\n"],"sourceRoot":""}