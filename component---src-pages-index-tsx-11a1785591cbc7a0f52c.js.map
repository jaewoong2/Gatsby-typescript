{"version":3,"sources":["webpack:///./src/components/lists/index.tsx","webpack:///./src/pages/index.tsx"],"names":["Lists","title","slug","date","tags","className","to","map","tag","key","Title","styled","h3","Description","p","ListWrapper","section","theme","color","border","Index","data","MainInfos","info","idx","description","descriptions","slice","allMarkdownRemark","edges","edge","node","frontmatter","id","fields","query"],"mappings":"8FAAA,iDAgCeA,IApBsB,SAAC,GAAgC,IAA9BC,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KACvD,OACI,kBAAC,IAAD,KACI,yBAAKC,UAAU,gBAEX,kBAAC,IAAD,CAAMA,UAAU,aAAaC,GAAIJ,GAC7B,wBAAIG,UAAU,mBAAd,GAAoCJ,IAGxC,wBAAII,UAAU,kBAAd,KAAkCF,GAClC,6BACKC,aADL,EACKA,EAAMG,KAAI,SAAAC,GAAG,OACV,kBAAC,IAAD,CAAKC,IAAKD,GAAMA,W,kCCvBxC,sHAOME,EAAQC,IAAOC,GAAV,+DAAGD,CAAH,qGASLE,EAAcF,IAAOG,EAAV,qEAAGH,CAAH,yCAKXI,EAAcJ,IAAOK,QAAV,qEAAGL,CAAH,+CAEW,qBAAGM,MAAkBC,MAAMC,UAoCxCC,UAjCmB,SAAC,GAAa,MAAXC,EAAW,EAAXA,KACjC,OACI,kBAAC,IAAD,KACI,iCACKC,IAAUf,KAAI,SAACgB,EAAMC,GAAP,OACX,kBAAC,WAAD,CAAUf,IAAKc,EAAKtB,MAAQuB,GACxB,kBAACd,EAAD,CAAOL,UAAU,mBAAmBkB,aAApC,EAAoCA,EAAMtB,QACzCsB,aAAA,EAAAA,EAAME,cAAe,kBAACZ,EAAD,CAAaR,UAAU,QAAvB,KAAiCkB,aAAjC,EAAiCA,EAAME,cAC5DF,aAAA,EAAAA,EAAMG,eACHH,EAAKG,aAAanB,KAAI,SAAAkB,GAAW,OAC7B,kBAACZ,EAAD,CAAaJ,IAAKgB,EAAYE,MAAM,EAAG,IAAKtB,UAAU,QAAtD,KACOoB,WAM3B,kBAACV,EAAD,KACI,kBAACL,EAAD,CAAOL,UAAU,mBAAjB,SACCgB,SAFL,UAEKA,EAAMO,yBAFX,aAEK,EAAyBC,MAAMtB,KAAI,SAACuB,EAAMN,GAAP,eAChC,kBAAC,IAAD,CACIpB,KAAM0B,SAAF,UAAEA,EAAMC,YAAR,iBAAE,EAAYC,mBAAd,aAAE,EAAyB5B,KAC/BH,MAAO6B,EAAKC,KAAKC,YAAY/B,MAC7BQ,IAAKqB,EAAKC,KAAKE,GAAGN,MAAM,EAAG,IAAMH,EACjCrB,KAAM2B,EAAKC,KAAKC,YAAY7B,KAC5BD,KAAM4B,EAAKC,KAAKG,OAAOhC,aAUxC,IAAMiC,EAAQ","file":"component---src-pages-index-tsx-11a1785591cbc7a0f52c.js","sourcesContent":["import { Link } from 'gatsby';\r\nimport React from 'react';\r\nimport { Container, Tag } from './styles';\r\n// import { OutboundLink } from 'gatsby-plugin-gtag';\r\n\r\ntype ListsProps = {\r\n    title: string;\r\n    date: string;\r\n    slug: string;\r\n    tags?: string[];\r\n};\r\n\r\nconst Lists: React.VFC<ListsProps> = ({ title, slug, date, tags }) => {\r\n    return (\r\n        <Container>\r\n            <div className=\"list-wrapper\">\r\n                {/* <OutboundLink className=\"link-posts\" href={'https://jaewoong2.github.io/woongs-world/' + slug}> */}\r\n                <Link className=\"link-posts\" to={slug}>\r\n                    <h3 className=\"post-title text\">{`${title}`}</h3>\r\n                </Link>\r\n                {/* </OutboundLink> */}\r\n                <h4 className=\"post-date text\">: {date}</h4>\r\n                <div>\r\n                    {tags?.map(tag => (\r\n                        <Tag key={tag}>{tag}</Tag>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Lists;\r\n","import { graphql } from 'gatsby';\r\nimport React, { Fragment } from 'react';\r\nimport styled from 'styled-components';\r\nimport Lists from '../components/lists';\r\nimport { MainInfos } from '../repo/app';\r\nimport MainComponent from '../templates/Layout';\r\nimport { ImdProps } from '../utils/type';\r\n\r\nconst Title = styled.h3`\r\n    font-size: 1.5em;\r\n    padding: 0;\r\n    margin-bottom: 5px;\r\n    font-weight: normal;\r\n    margin-left: 10px;\r\n    margin-top: 8px;\r\n`;\r\n\r\nconst Description = styled.p`\r\n    font-size: 0.925em;\r\n    margin-left: 11px;\r\n`;\r\n\r\nconst ListWrapper = styled.section`\r\n    margin-top: 10px;\r\n    border-top: 2px solid ${({ theme }) => theme.color.border};\r\n`;\r\n\r\nconst Index: React.FC<ImdProps> = ({ data }) => {\r\n    return (\r\n        <MainComponent>\r\n            <section>\r\n                {MainInfos.map((info, idx) => (\r\n                    <Fragment key={info.title + idx}>\r\n                        <Title className=\"represent-color\">{info?.title}</Title>\r\n                        {info?.description && <Description className=\"text\">- {info?.description}</Description>}\r\n                        {info?.descriptions &&\r\n                            info.descriptions.map(description => (\r\n                                <Description key={description.slice(0, 25)} className=\"text\">\r\n                                    - {description}\r\n                                </Description>\r\n                            ))}\r\n                    </Fragment>\r\n                ))}\r\n            </section>\r\n            <ListWrapper>\r\n                <Title className=\"represent-color\">Posts</Title>\r\n                {data?.allMarkdownRemark?.edges.map((edge, idx) => (\r\n                    <Lists\r\n                        tags={edge?.node?.frontmatter?.tags}\r\n                        title={edge.node.frontmatter.title}\r\n                        key={edge.node.id.slice(0, 10) + idx}\r\n                        date={edge.node.frontmatter.date}\r\n                        slug={edge.node.fields.slug}\r\n                    />\r\n                ))}\r\n            </ListWrapper>\r\n        </MainComponent>\r\n    );\r\n};\r\n\r\nexport default Index;\r\n\r\nexport const query = graphql`\r\n    query {\r\n        allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }, limit: 5) {\r\n            edges {\r\n                node {\r\n                    id\r\n                    frontmatter {\r\n                        title\r\n                        date(formatString: \"DD MMMM, YYYY\")\r\n                        tags\r\n                    }\r\n                    fields {\r\n                        slug\r\n                    }\r\n                    excerpt\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n"],"sourceRoot":""}